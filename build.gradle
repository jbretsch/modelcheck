plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'groovy'
    id "com.github.ben-manes.versions" version "0.39.0"
    id "nebula.optional-base" version "7.0.0"
}

group = "net.bretti.modelcheck"
archivesBaseName = 'modelcheck'
version = "1.0.1-SNAPSHOT"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

defaultTasks 'clean', 'build'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.32'

    testRuntime 'ch.qos.logback:logback-classic:1.2.8'

    testImplementation 'org.codehaus.groovy:groovy-all:3.0.9'
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'org.mockito:mockito-core:4.1.0'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'modelcheck'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'modelcheck'
                description = 'modelcheck is a Java library that allows you to check whether a given transition ' +
                        'system (described as a Kripke structure) satisfies a given computation tree logic ' +
                        '(CTL) formula.'
                url = 'https://github.com/jbretsch/modelcheck'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/jbretsch/modelcheck/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'jbretsch'
                        name = 'Jan Bretschneider'
                        email = 'mail@jan-bretschneider.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jbretsch/modelcheck.git'
                    developerConnection = 'scm:git:ssh://github.com:jbretsch/modelcheck.git'
                    url = 'https://github.com/jbretsch/modelcheck'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ossrh'
            credentials(PasswordCredentials)
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.named('wrapper') {
    gradleVersion = '6.9'
    distributionType = Wrapper.DistributionType.ALL
}
