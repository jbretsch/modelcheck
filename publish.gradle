apply plugin: 'maven'
apply plugin: 'signing'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'modelcheck'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'modelcheck is a Java library that allows you to check whether a given transition system ' +
                        '(described as a Kripke structure) satisfies a given computation tree logic (CTL) formula.'
                url 'https://github.com/jbretsch/modelcheck'

                scm {
                    connection 'scm:git:git://github.com/jbretsch/modelcheck.git'
                    developerConnection 'scm:git:ssh://github.com:jbretsch/modelcheck.git'
                    url 'https://github.com/jbretsch/modelcheck'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/jbretsch/modelcheck/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'jbretsch'
                        name 'Jan Bretschneider'
                        email 'mail@jan-bretschneider.de'
                    }
                }
            }

            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.scope.text() == 'test'
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }
}
